let o=class{constructor(t,n){this.status=t,typeof n=="string"?this.body={message:n}:n?this.body=n:this.body={message:`Error: ${t}`}}toString(){return JSON.stringify(this.body)}},i=class{constructor(t,n){this.status=t,this.location=n}},h=class{constructor(t,n){this.status=t,this.data=n}};function l(e,t){if(isNaN(e)||e<400||e>599)throw new Error(`HTTP error status codes must be between 400 and 599 â€” ${e} is invalid`);return new o(e,t)}function f(e,t){if(isNaN(e)||e<300||e>308)throw new Error("Invalid status code");return new i(e,t)}function g(e,t){const n=JSON.stringify(e),r=new Headers(t?.headers);return r.has("content-length")||r.set("content-length",s.encode(n).byteLength.toString()),r.has("content-type")||r.set("content-type","application/json"),new Response(n,{...t,headers:r})}const s=new TextEncoder;function u(e,t){const n=new Headers(t?.headers);return n.has("content-length")||n.set("content-length",s.encode(e).byteLength.toString()),new Response(e,{...t,headers:n})}export{h as A,o as H,i as R,l as e,g as j,f as r,u as t};
